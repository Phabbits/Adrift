<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_car</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>par_vehicle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//driver - person who is driving
driver = noone;
//driverImage - image of driver
driverImage = 0;
//driverInput - input of driver
driverInput = 0;
//driverId - id of driver
driverId = noone;
//driverObjectId - id of object of driver
dirverObjectId = 0;

//passengerAmount
passengerAmount = 1;
//passengers
passengers[passengerAmount-1] = noone;
for (var i = 0; i &lt; passengerAmount; i ++) {
    passengers[i] = noone;
    }

//nHealth - car health
nHealth = 100;
//nHealthMax - max car health
nHealthMax = nHealth;
//stop animation
image_speed = 0;

//actionInputFreeze
actionInputFreeze = 0;
//actionInputFreezeMax
actionInputFreezeMax = 10;
//maxSpeed - max speed
maxSpeed = 4

//nativeDrive - whether or not a native drivable vehicle
nativeDrive = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input
    //driver
    if (script_execute(scr_idExist, driver)) {
        //left, up, right, down, action - keys
        haxis1 = 0;
        vaxis1 = 0;
        actionReleased = false;
        
        //axisBuffer - buffer till push starts counting
        axisBuffer = 0.4;
        
        //Player
        switch(driverInput) {
            case 1:
                //input
                input = 0;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 2:
                //input
                input = 1;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 3:
                //input
                input = 2;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 4:
                //input
                input = 3;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 5:
                //input
                if(keyboard_check(vk_left)) haxis1 = -1;
                if(keyboard_check(vk_right)) haxis1 = 1;
                if(keyboard_check(vk_up)) vaxis1 = -1;
                if(keyboard_check(vk_down)) vaxis1 = 1;
                actionReleased = keyboard_check_pressed(vk_numpad0);
                break;
            case 6:
                //input
                if(keyboard_check(ord("A"))) haxis1 = -1;
                if(keyboard_check(ord("D"))) haxis1 = 1;
                if(keyboard_check(ord("W"))) vaxis1 = -1;
                if(keyboard_check(ord("S"))) vaxis1 = 1;
                actionReleased = keyboard_check_pressed(ord("F"));
                break;
            case 7:
                //input
                if(keyboard_check(ord("J"))) haxis1 = -1;
                if(keyboard_check(ord("L"))) haxis1 = 1;
                if(keyboard_check(ord("I"))) vaxis1 = -1;
                if(keyboard_check(ord("K"))) vaxis1 = 1;
                actionReleased = keyboard_check_pressed(186);
                break;
            case 8:
                //input
                if(keyboard_check(vk_left)) haxis1 = -1;
                if(keyboard_check(vk_right)) haxis1 = 1;
                if(keyboard_check(vk_up)) vaxis1 = -1;
                if(keyboard_check(vk_down)) vaxis1 = 1;
                actionReleased = keyboard_check_pressed(vk_numpad3);
                break;
            case 0:
                //input
                if (alarm[0] &lt;= 0) {
                    haxis1 = choose(1, 0, -1);
                    vaxis1 = choose(1, 0, -1);
                    action = choose(false, true);
                    alarm[0] = irandom_range(10, 20);
                    }
                break;
            }
        //axis check
        if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
        if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
        //freeze action
        if (actionInputFreeze &gt; 0) {
            actionReleased = false;
            actionInputFreeze--;
            }
    
        //move_speed - acculmative speed
        move_speed = 0.1;
        //maxSpeed - max speed
        maxSpeed = 4
        
        //Find current hspeed
        hspeed += (haxis1)*move_speed;
        vspeed += (vaxis1)*move_speed;
        dir = script_execute(scr_findDir, hspeed, vspeed, move_speed*2)
        if (dir = 8) dir = image_index;
        if !(script_execute(scr_changeDir, dir, image_index)) {
            hspeed -= (haxis1)*move_speed;
            vspeed -= (vaxis1)*move_speed;
            }
        
        //Slow down
        if (haxis1 = 0) {
            if (hspeed &gt; move_speed*2) hspeed -= move_speed*2
            else if (hspeed &lt; -move_speed*2) hspeed += move_speed*2
            else hspeed = 0;
            }
        if (vaxis1= 0) {
            if (vspeed &gt; move_speed*2) vspeed -= move_speed*2
            else if (vspeed &lt; -move_speed*2) vspeed += move_speed*2
            else vspeed = 0;
            }
        
        //keep speed in check
        if (hspeed &gt; maxSpeed) hspeed = maxSpeed;
        if (hspeed &lt; -maxSpeed) hspeed = -maxSpeed;
        if (vspeed &gt; maxSpeed) vspeed = maxSpeed;
        if (vspeed &lt; -maxSpeed) vspeed = -maxSpeed;
        
        //find dir
        dir = script_execute(scr_findDir, hspeed, vspeed, move_speed*2);
        if (dir &lt; 8 and script_execute(scr_changeDir, dir, image_index)) image_index = dir;
        
        //leave car
        if (actionReleased) {
            event_user(1);
            }
        }
    else {
        //move_speed - acculmative speed
        move_speed = 0.1;
        
        //stop
        if (hspeed &gt; move_speed*2) hspeed -= move_speed*2
        else if (hspeed &lt; -move_speed*2) hspeed += move_speed*2
        else hspeed = 0;
        if (vspeed &gt; move_speed*2) vspeed -= move_speed*2
        else if (vspeed &lt; -move_speed*2) vspeed += move_speed*2
        else vspeed = 0;
        }
    
    //passenger
    for (i = 0; i &lt; passengerAmount; i++) {
        var passenger = passengers[i];
        if (instance_exists(passenger)) {
            //action - keys
            actionReleased = false;
        
        //Player
        switch(passenger.playerInput) {
            case 1:
                //input
                input = 0;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 2:
                //input
                input = 1;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 3:
                //input
                input = 2;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 4:
                //input
                input = 3;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 5:
                //input
                actionReleased = keyboard_check(vk_numpad0);
                break;
            case 6:
                //input
                actionReleased = keyboard_check(ord("F"));
                break;
            case 7:
                //input
                actionReleased = keyboard_check(186);
                break;
            case 8:
                //input
                actionReleased = keyboard_check(vk_numpad3);
                break;
            case 0:
                //input
                if (alarm[0] &lt;= 0) {
                    action = choose(false, true);
                    alarm[0] = irandom_range(10, 20);
                    }
                break;
            }
        //freeze action
        if (actionInputFreeze &gt; 0) {
            actionReleased = 0;
            actionInputFreeze--;
            }

        //leave car
        if (actionReleased) {
            //acitvate passenger
            passenger.active = true;
            passengers[i] = noone;
            }
        }
    }

    //collide with solid objects
    while(!place_free(x+hspeed, y))
    {
        with (instance_place(x+hspeed, y, window)) instance_destroy();
        hspeed = scr_reduce(hspeed);
        if hspeed = 0 break;
    }
    while(!place_free(x+hspeed,y+vspeed))
    {
        with (instance_place(x+hspeed, y+vspeed, window)) instance_destroy();
        vspeed = scr_reduce(vspeed);
        if vspeed = 0 break;
    }

//collide with explosion
    if (instance_place(x, y, explosion)) nHealth -= 20;
    if (instance_place(x, y, MissleExplosion)) nHealth -= 7;
    if (instance_place(x, y, obj_radiation)) nHealth -= .1;
    if (instance_place(x, y, obj_explosionCar)) nHealth -= 1;
    if (instance_place(x, y, NukeExplosion)) nHealth -= 40;
    with (instance_place(x, y, BigBomb90)) {
        other.nHealth -= 3;
        //destroy other
        instance_destroy();
        }
    with (instance_place(x, y, BombPiece)) {
        other.nHealth -= 1;
        //destroy other
        instance_destroy();
        }
//damage 
    if (nHealth &lt; 50) sprite_index = spr_carDamaged;
    else sprite_index = spr_car;

//die
    if (nHealth &lt; 1) {
        //drop driver
        event_user(1);
        //drop passenger
        for (i = 0; i &lt; passengerAmount; i++) {
            var passenger = passengers[i];
            if (instance_exists(passenger)) {
                //acitvate passenger
                passenger.active = true;
                //actionInputFreeze
                if !(passenger.civilian) {
                    passenger.actionInputFreeze = passenger.actionInputFreezeMax;
                    }
                passengers[i] = noone;
                }
            }
        
        //create explosion
        instance_create(x, y, obj_explosionCar);
        //destroy self
        instance_destroy();
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update driver position
    //driver
    if (script_execute(scr_idExist, driver)) {
        driver.x = x+sprite_width/2;
        driver.y = y+sprite_height/2;
        }
    //passenger
    for (i = 0; i &lt; passengerAmount; i++) {
        var passenger = passengers[i];
        if (instance_exists(passenger)) {
            passenger.x = x+sprite_width/2;
            passenger.y = y+sprite_height/2;
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///run over zombies
var dir = point_direction(x, y, x+hspeed, y+vspeed);
var len = sprite_width/2+16;
var cx = x + sprite_width/2;
var cy = y + sprite_height/2;
var checkX = cx + lengthdir_x(len, dir);
var checkY = cy + lengthdir_y(len, dir);
var rad = sprite_width/2;

/*
switch(image_index) {
    case 0:
        with(collision_triangl
        */
with(collision_point(checkX, checkY, obj_zombie, false, true)) {
    //nHealth = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw HUD
var portHeight = display_get_gui_height();
//draw set up
draw_set_font(fnt_HUD);
draw_set_color(c_white);

//if driver exist
if (instance_exists(driver)) {
    //draw HUD bar
    if !(driver.civilian) {
        draw_sprite_ext(spr_HUDBar, driver.image_index, driver.playerId*80*portScale, portHeight - 36*portScale, portScale, portScale, 0, c_white, 1);
        //sep 100 - so new line wont be seen
        var sep = 100*portScale;
        draw_text_ext(driver.playerId*80*portScale+2*portScale, portHeight - 36*portScale, driver.nickname, sep, 78*portScale);
        //draw supplies
        draw_text(driver.playerId*80*portScale+17*portScale, portHeight - 20*portScale, driver.supplyblue);
        //draw health bar
        draw_healthbar(driver.playerId*80*portScale+2*portScale, portHeight - 19*portScale, driver.playerId*80*portScale+78*portScale, portHeight - 17*portScale, driver.nHealth, c_black, c_red, c_green, 180, true, false);
        }
    }

//draw passengers
    for (i = 0; i &lt; passengerAmount; i++) {
        var passenger = passengers[i];
        if (instance_exists(passenger)) {
            //draw HUD bar
            if !(passenger.civilian) {
                draw_sprite_ext(spr_HUDBar, passenger.image_index, passenger.playerId*80*portScale, portHeight - 36*portScale, portScale, portScale, 0, c_white, 1);
                //sep 100 - so new line wont be seen
                var sep = 100*portScale;
                draw_text_ext(passenger.playerId*80*portScale+2*portScale, portHeight - 36*portScale, passenger.nickname, sep, 78*portScale);
                //draw supplies
                draw_text(passenger.playerId*80*portScale+17*portScale, portHeight - 20*portScale, passenger.supplyblue);
                //draw health bar
        draw_healthbar(passenger.playerId*80*portScale+2*portScale, portHeight - 19*portScale, passenger.playerId*80*portScale+78*portScale, portHeight - 17*portScale, passenger.nHealth, c_black, c_red, c_green, 180, true, false);
                }
            }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw self
draw_self();
//draw health
//if (script_execute(scr_idExist, driver))) {
    draw_healthbar(x, y + 32, x + 32, y + 30, nHealth, c_black, c_red, c_green, 180, true, false);
//    }
//draw set up
draw_set_font(fnt_command);
draw_set_color(c_white);
//draw driver
if (script_execute(scr_idExist, driver)) {
    if (image_index = 0) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 4+8, 1, 1, 90, c_white, 1);
    if (image_index = 1) draw_sprite_ext(driverImage, driver.image_index, x + 13+8, y + 4+8, 1, 1, 45, c_white, 1);
    if (image_index = 2) draw_sprite_ext(driverImage, driver.image_index, x + 16+8, y + 10+8, 1, 1, 0, c_white, 1);
    if (image_index = 3) draw_sprite_ext(driverImage, driver.image_index, x + 14+8, y + 13+8, 1, 1, 315, c_white, 1);
    if (image_index = 4) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 15+8, 1, 1, 270, c_white, 1);
    if (image_index = 5) draw_sprite_ext(driverImage, driver.image_index, x + 5+8, y + 13+8, 1, 1, 225, c_white, 1);
    if (image_index = 6) draw_sprite_ext(driverImage, driver.image_index, x + 4+8, y + 10+8, 1, 1, 180, c_white, 1);
    if (image_index = 7) draw_sprite_ext(driverImage, driver.image_index, x + 5+8, y + 4+8, 1, 1, 135, c_white, 1);
    }

//draw passenger
    for (i = 0; i &lt; passengerAmount; i++) {
        var passenger = passengers[i];
        if (instance_exists(passenger)) {
    if (image_index = 0) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 9+8, y + 18+8, 1, 1, 90, c_white, 1);
    if (image_index = 1) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 3+8, y + 15+8, 1, 1, 45, c_white, 1);
    if (image_index = 2) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 0+8, y + 9+8, 1, 1, 0, c_white, 1);
    if (image_index = 3) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 3+8, y + 2+8, 1, 1, 315, c_white, 1);
    if (image_index = 4) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 9+8, y + 0+8, 1, 1, 270, c_white, 1);
    if (image_index = 5) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 16+8, y + 2+8, 1, 1, 225, c_white, 1);
    if (image_index = 6) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 18+8, y + 9+8, 1, 1, 180, c_white, 1);
    if (image_index = 7) draw_sprite_ext(passenger.sprite_index, passenger.image_index, x + 16+8, y + 15+8, 1, 1, 135, c_white, 1);
    }
    }
    
/*
var rad = sprite_width/4;
var dir = point_direction(x, y, x+hspeed, y+vspeed);
var cx = x+sprite_width/2;
var cy = y+sprite_height/2;
draw_rectangle(cx-rad, cy-rad, cx+rad+lengthdir_x(rad*2+16, dir), cy+rad+lengthdir_y(rad*2+16, dir), true);
draw_rectangle(cx+lengthdir_x(rad, dir), cy+lengthdir_y(rad, dir), cx, cy, true);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
