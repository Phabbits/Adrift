<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///missions menu
roomSelected = 0;

rooms = ds_list_create();
roomTitles = ds_list_create();
roomSuccessRates = ds_list_create();
roomTimes = ds_list_create();

roomsDefault = ds_list_create();
roomTitlesDefault = ds_list_create();
roomSuccessRatesDefault = ds_list_create();
roomTimesDefault = ds_list_create();

//defaults
ds_list_add(roomsDefault, rm_town, rm_happyville, rm_mansion, rm_forest,rm_zombieRoad, rm_zombieRoad2, rm_zombieRoadFull);
ds_list_add(roomTitlesDefault, "Olesville", "Happyville California", "The Mansion", "The Forest", "Zombie Road Part 1", "Zombie Road Part 2", "Zombie Road Full");
for (var i = 0; i &lt; ds_list_size(roomsDefault); i++) {
    ds_list_add(roomSuccessRatesDefault, 0);
    ds_list_add(roomTimesDefault, 0);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finish menu
rescuedRate = 0;
time = 0;
success = false;

oldRescuedRate = 0;
oldTime = 0;

//stats
followTheLeader = "";
followTheLeaderA = 0;
badLeader = "";
badLeaderA = 0;
roadTrip = "";
roadTripA = 0;
imRadioactive = "";
imRadioactiveA = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu

nicknameIdeas = ds_list_create();
nicknamesDefault = ds_list_create();
ds_list_add(nicknamesDefault, "Bomb Slayer", "Gretch BearBond", "Eazy E", "Qdogg", "The Regulator");

//load options
//open file
ini_open("options.ini");

//load data
section = string("default");
var str;

//gameMode
gameMode = ini_read_string(section, "gameMode", "Bomb Apocalypse");

//nickNames
str = ini_read_string(section, "nicknames", "");
if (str != "") ds_list_read(nicknameIdeas, str);
else nicknameIdeas = nicknamesDefault;

//destroy default lists

//close file
ini_close(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug options menu

//load options
//open file
ini_open("options.ini");

//load data
section = string("debug");

//deactivateOutside
deactivateOutside = ini_read_string(section, "deactivateOutside", "All");
//yallVehicleCircles - draw helpful circles around vehicles selection radius
yallVehicleCircles = ini_read_string(section, "yallVehicleCircles", "Off");
//supplyPackValue - draw helpful circles around vehicles selection radius
supplyPackValue = ini_read_real(section, "supplyPackValue", 25);

//destroy default lists

//close file
ini_close(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set player variables
players = ds_list_create();
nicknames = ds_list_create();
classes = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lobby menu
classOptions = ds_list_create();
ds_list_add(classOptions, "medic", "engineer", "marine", "disarmer", "mechanic");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu variables

//menu - current menu
menu = "main";

//buttons - holds menu buttons
buttons = ds_list_create();

//selected - selected button
selected = 0;

//inputBuffer - small buffer to slow down gamepad input
inputBuffer = 0;
//inputBufferMax
inputBufferMax = 4;

//tagLine
tagLine = "Now with#Minivans!#And Zombie Bombs!";
//version
version = 1.06;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///first menu
var button = instance_create(room_width/2, 176, obj_button);
button.image_index = 0;
button.action = "lobby";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, 176+48, obj_button);
button.image_index = 4;
button.action = "options";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, room_height-64, obj_button);
button.image_index = 1;
button.action = "quit";
ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//finish
event_user(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input
    switch(menu) {
        case "main":
        case "finish":
        //left, up, right, down, action - keys
        haxis1 = 0;
        vaxis1 = 0;
        actionReleased = false;
        buildReleased = false;
        convertReleased = false;
        yallPressed = false;
        yallReleased = false;
        youPressed = false;
        youReleased = false;
        
        //axisBuffer - buffer till push starts counting
        axisBuffer = 0.4;
        
        if (inputBuffer &lt; 0) {
            //gamepad input
            input = 0;
            haxis1 = gamepad_axis_value(input, gp_axislh);
            vaxis1 = gamepad_axis_value(input, gp_axislv);
            //axis check
            if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
            if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
            
            //keyboard input
            if (keyboard_check(vk_left) || keyboard_check(ord("A")) || keyboard_check(ord("J"))) haxis1 = -1;
            if (keyboard_check(vk_right) || keyboard_check(ord("D")) || keyboard_check(ord("L"))) haxis1 = 1;
            if (keyboard_check(vk_up) || keyboard_check(ord("W")) || keyboard_check(ord("I"))) vaxis1 = -1;
            if (keyboard_check(vk_down) || keyboard_check(ord("S")) || keyboard_check(ord("K"))) vaxis1 = 1;
            
            //reset buffer
            inputBuffer = inputBufferMax;
            }
        else inputBuffer--;
            
            //gamepad input
            input = 0;
            actionReleased = gamepad_button_check_released(input, gp_face1);
            
            //keyboard input
            if (keyboard_check_pressed(vk_numpad0) || keyboard_check_pressed(ord("F"))) actionReleased = true;   
        
    //selector
    if (haxis1 &gt; 0 or vaxis1 &gt; 0) {
        selected ++;
        //keep selected in bounds
        if (selected &gt; ds_list_size(buttons)-1) {
            selected = 0;
            }
        }
    else if (haxis1 &lt; 0 or vaxis1 &lt; 0) {
        selected --;
        //keep selected in bounds
        if (selected &lt; 0) {
            selected = ds_list_size(buttons)-1;
            }
        }
    //press button
    if (actionReleased) {
        //check if button exists
        var button = ds_list_find_value(buttons, selected);
        if (ds_list_size(buttons) &gt; 0 &amp;&amp; instance_exists(button)) {
            with (button) {
                event_user(0);
                }
            }
        }
        break;
        case "missions":
        //left, up, right, down, action - keys
        haxis1 = 0;
        vaxis1 = 0;
        actionReleased = false;
        buildReleased = false;
        convertReleased = false;
        yallPressed = false;
        yallReleased = false;
        youPressed = false;
        youReleased = false;
        
        //axisBuffer - buffer till push starts counting
        axisBuffer = 0.4;
        
        if (inputBuffer &lt; 0) {
            //gamepad input
            input = 0;
            haxis1 = gamepad_axis_value(input, gp_axislh);
            vaxis1 = gamepad_axis_value(input, gp_axislv);
            //axis check
            if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
            if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
            
            //keyboard input
            if (keyboard_check(vk_left) || keyboard_check(ord("A")) || keyboard_check(ord("J"))) haxis1 = -1;
            if (keyboard_check(vk_right) || keyboard_check(ord("D")) || keyboard_check(ord("L"))) haxis1 = 1;
            if (keyboard_check(vk_up) || keyboard_check(ord("W")) || keyboard_check(ord("I"))) vaxis1 = -1;
            if (keyboard_check(vk_down) || keyboard_check(ord("S")) || keyboard_check(ord("K"))) vaxis1 = 1;
            
            //reset buffer
            inputBuffer = inputBufferMax;
            }
        else inputBuffer--;
            
            //gamepad input
            input = 0;
            actionReleased = gamepad_button_check_released(input, gp_face1);
            
            //keyboard input
            if (keyboard_check_pressed(vk_numpad0) || keyboard_check_pressed(ord("F"))) actionReleased = true;   
        
    //selector
    if (haxis1 &gt; 0) {
        selected ++;
        //keep selected in bounds
        if (selected &gt; ds_list_size(buttons)-1) {
            selected = 0;
            }
        }
    else if (haxis1 &lt; 0) {
        selected --;
        //keep selected in bounds
        if (selected &lt; 0) {
            selected = ds_list_size(buttons)-1;
            }
        }
    //room selector
    if (vaxis1 &gt; 0) {
        roomSelected ++;
        //keep selected in bounds
        if (roomSelected &gt; ds_list_size(rooms)-1) {
            roomSelected = 0;
            }
        }
    else if (vaxis1 &lt; 0) {
        roomSelected --;
        //keep selected in bounds
        if (roomSelected &lt; 0) {
            roomSelected = ds_list_size(rooms)-1;
            }
        }
    //press button
    if (actionReleased) {
        //check if button exists
        var button = ds_list_find_value(buttons, selected);
        if (ds_list_size(buttons) &gt; 0 &amp;&amp; instance_exists(button)) {
            with (button) {
                event_user(0);
                }
            }
        }
        break;
    case "lobby":
        //join input
        for (var i = 0; i &lt; 4; i ++) {
            if (gamepad_button_check_released(i, gp_face1)) {
                var index = ds_list_find_index(players, i)
                if (index &gt;= 0) {
                    ds_list_delete(players, index);
                    ds_list_delete(nicknames, index);
                    ds_list_delete(classes, index);
                    }
                else {
                    ds_list_add(players, i);
                    ds_list_add(nicknames, "Player " + string(i));
                    ds_list_add(classes, ds_list_find_value(classOptions, 0));
                    }
                }
            if (keyboard_check_released(vk_numpad0)) {
                var i = 4;
                var index = ds_list_find_index(players, i)
                if (index &gt;= 0) {
                    ds_list_delete(players, index);
                    ds_list_delete(nicknames, index);
                    ds_list_delete(classes, index);
                    }
                else {
                    ds_list_add(players, i);
                    ds_list_add(nicknames, "Player " + string(i));
                    ds_list_add(classes, ds_list_find_value(classOptions, 0));
                    }
                }
            if (keyboard_check_released(ord("F"))) {
                var i = 5;
                var index = ds_list_find_index(players, i)
                if (index &gt;= 0) {
                    ds_list_delete(players, index);
                    ds_list_delete(nicknames, index);
                    ds_list_delete(classes, index);
                    }
                else {
                    ds_list_add(players, i);
                    ds_list_add(nicknames, "Player " + string(i));
                    ds_list_add(classes, ds_list_find_value(classOptions, 0));
                    }
                }
            if (keyboard_check_released(186)) { //;
                var i = 6;
                var index = ds_list_find_index(players, i)
                if (index &gt;= 0) {
                    ds_list_delete(players, index);
                    ds_list_delete(nicknames, index);
                    ds_list_delete(classes, index);
                    }
                else {
                    ds_list_add(players, i);
                    ds_list_add(nicknames, "Player " + string(i));
                    ds_list_add(classes, ds_list_find_value(classOptions, 0));
                    }
                }
            }
        
        //other input
        if (inputBuffer &lt; 0) {
            for (var i = 0; i &lt; ds_list_size(players); i ++) {
                //if player is in
                //if (ds_list_find_index(players, i) &gt;= 0) {
                    //axisBuffer - buffer till push starts counting
                    axisBuffer = 0.4;
                    
                    //reset input
                    haxis1 = 0;
                    vaxis1 = 0;
                    
                    var playerInput = ds_list_find_value(players, i)
                    switch(playerInput) {
                        case(0):
                        case(1):
                        case(2):
                        case(3):
                            //gamepad input
                            input = playerInput;
                            haxis1 = gamepad_axis_value(input, gp_axislh);
                            vaxis1 = gamepad_axis_value(input, gp_axislv);
                            //axis check
                            if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
                            if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
                            break;
                        case(4):
                            //keyboard input
                            if (keyboard_check(vk_left)) haxis1 = -1;
                            if (keyboard_check(vk_right)) haxis1 = 1;
                            if (keyboard_check(vk_up)) vaxis1 = -1;
                            if (keyboard_check(vk_down)) vaxis1 = 1;
                            break;
                        case(5):
                            //keyboard input
                            if (keyboard_check(ord("A"))) haxis1 = -1;
                            if (keyboard_check(ord("D"))) haxis1 = 1;
                            if (keyboard_check(ord("W"))) vaxis1 = -1;
                            if (keyboard_check(ord("S"))) vaxis1 = 1;
                            break;
                        case(6):
                            //keyboard input
                            if (keyboard_check(ord("J"))) haxis1 = -1;
                            if (keyboard_check(ord("L"))) haxis1 = 1;
                            if (keyboard_check(ord("I"))) vaxis1 = -1;
                            if (keyboard_check(ord("K"))) vaxis1 = 1;
                            break;
                        }
                    
                    playerIndex = i;//ds_list_find_index(players, i)
                    //nicknames
                    if (vaxis1 &gt; 0) {
                        nameValue = ds_list_find_value(nicknames, playerIndex);
                        nameIndex = ds_list_find_index(nicknameIdeas, nameValue);
                        if (nameIndex == -1) nameIndex = ds_list_size(nicknameIdeas);
                        nameIndex ++;
                        //keep nameIndex in bounds
                        if (nameIndex &gt; ds_list_size(nicknameIdeas)) {
                            nameIndex = 0;
                            }
                        //set name
                        if (nameIndex = ds_list_size(nicknameIdeas)) ds_list_replace(nicknames, playerIndex, "Player " + string(playerInput));
                        else ds_list_replace(nicknames, playerIndex, ds_list_find_value(nicknameIdeas, nameIndex));
                        }
                    else if (vaxis1 &lt; 0) {
                        nameValue = ds_list_find_value(nicknames, playerIndex);
                        nameIndex = ds_list_find_index(nicknameIdeas, nameValue);
                        if (nameIndex == -1) nameIndex = ds_list_size(nicknameIdeas);
                        nameIndex --;
                        //keep nameIndex in bounds
                        if (nameIndex &lt; 0) {
                            nameIndex = ds_list_size(nicknameIdeas);
                            }
                        //set name
                        if (nameIndex = ds_list_size(nicknameIdeas)) ds_list_replace(nicknames, playerIndex, "Player " + string(playerInput));
                        else ds_list_replace(nicknames, playerIndex, ds_list_find_value(nicknameIdeas, nameIndex));
                        }
                    
                    //classes
                    if (haxis1 &gt; 0) {
                        classValue = ds_list_find_value(classes, playerIndex);
                        classIndex = ds_list_find_index(classOptions, classValue);
                        classIndex ++;
                        //keep nameIndex in bounds
                        if (classIndex &gt; ds_list_size(classOptions)-1) {
                            classIndex = 0;
                            }
                        //set class
                        ds_list_replace(classes, playerIndex, ds_list_find_value(classOptions, classIndex));
                        }
                    else if (haxis1 &lt; 0) {
                        classValue = ds_list_find_value(classes, playerIndex);
                        classIndex = ds_list_find_index(classOptions, classValue);
                        classIndex --;
                        //keep nameIndex in bounds
                        if (classIndex &lt; 0) {
                            classIndex = ds_list_size(classOptions)-1;
                            }
                        //set name
                        ds_list_replace(classes, playerIndex, ds_list_find_value(classOptions, classIndex));
                        }
                }
            //}
            //reset buffer
            inputBuffer = inputBufferMax;
            }
        else inputBuffer--;
                

            //gamepad input
            input = 0;
            haxis1 = gamepad_axis_value(input, gp_axislh);
            vaxis1 = gamepad_axis_value(input, gp_axislv);
            //axis check
            if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
            if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
            
            //keyboard input
            if (keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord("A")) || keyboard_check_pressed(ord("J"))) haxis1 = -1;
            if (keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord("D")) || keyboard_check_pressed(ord("L"))) haxis1 = 1;
            if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")) || keyboard_check_pressed(ord("I"))) vaxis1 = -1;
            if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("S")) || keyboard_check_pressed(ord("K"))) vaxis1 = 1;
            
            //reset buffer
            //inputBuffer = inputBufferMax;
            
            //gamepad input
            input = 0;
            actionReleased = gamepad_button_check_released(input, gp_face1);
            
            //keyboard input
            if (keyboard_check_released(vk_numpad0) || keyboard_check_released(ord("F"))) actionReleased = true;   
        

    //press button
    if (gamepad_button_check_released(0, gp_start) || gamepad_button_check_released(1, gp_start) || gamepad_button_check_released(2, gp_start) || gamepad_button_check_released(3, gp_start) || keyboard_check_released(vk_enter)) {
        //goto missions
        if(ds_list_size(players) &gt; 0) event_user(1);
        }
        break;
        case "options":
        case "debugOptions":
            if !(instance_exists(obj_inputButton)) {
            //left, up, right, down, action - keys
            haxis1 = 0;
            vaxis1 = 0;
            actionReleased = false;
            buildReleased = false;
            convertReleased = false;
            yallPressed = false;
            yallReleased = false;
            youPressed = false;
            youReleased = false;
            
            //axisBuffer - buffer till push starts counting
            axisBuffer = 0.4;
            
            if (inputBuffer &lt; 0) {
                //gamepad input
                input = 0;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                //axis check
                if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
                if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
                
                //keyboard input
                if (keyboard_check(vk_left) || keyboard_check(ord("A")) || keyboard_check(ord("J"))) haxis1 = -1;
                if (keyboard_check(vk_right) || keyboard_check(ord("D")) || keyboard_check(ord("L"))) haxis1 = 1;
                if (keyboard_check(vk_up) || keyboard_check(ord("W")) || keyboard_check(ord("I"))) vaxis1 = -1;
                if (keyboard_check(vk_down) || keyboard_check(ord("S")) || keyboard_check(ord("K"))) vaxis1 = 1;
                
                //reset buffer
                inputBuffer = inputBufferMax;
                }
            else inputBuffer--;
            
            //gamepad input
            input = 0;
            actionReleased = gamepad_button_check_released(input, gp_face1);
            
            //keyboard input
            if (keyboard_check_released(vk_numpad0) || keyboard_check_released(ord("F"))) actionReleased = true;   
        
            //selector
            if (vaxis1 &gt; 0) {
                selected ++;
                //keep selected in bounds
                if (selected &gt; ds_list_size(buttons)-1) {
                    selected = 0;
                    }
                }
            else if (vaxis1 &lt; 0) {
                selected --;
                //keep selected in bounds
                if (selected &lt; 0) {
                    selected = ds_list_size(buttons)-1;
                    }
                }
            
            //button controls
            var button = ds_list_find_value(buttons, selected);
            
            //check if button exists
            if (ds_list_size(buttons) &gt; 0 &amp;&amp; instance_exists(button)) {
                if (haxis1 &gt; 0) {
                    with (button) {
                        if (action = "value") {
                            value ++;
                            //keep in bounds
                            if (value &gt; ds_list_size(values)-1) {
                                value = 0;
                                }
                            }
                        }
                    }
                else if (haxis1 &lt; 0) {
                    with (button) {
                        if (action = "value") {
                            value --;
                            //keep in bounds
                            if (value &lt; 0) {
                                value = ds_list_size(values)-1;
                                }
                            }
                        }
                    }
                //press button
                if (actionReleased) {
                    with (button) {
                        event_user(0);
                        }
                    }
                }
            break;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart
if !(instance_exists(obj_inputButton)) {
    game_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_menu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete save files
file_delete("Bomb Apocalypse.ini");
file_delete("Zombie Bomb Apocalypse.ini");
file_delete("options.ini");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to options from debug options
menu = "options";

//save options
button = ds_list_find_value(buttons, 0);
deactivateOutside = ds_list_find_value(button.values, button.value);
button = ds_list_find_value(buttons, 1);
yallVehicleCircles = ds_list_find_value(button.values, button.value);
button = ds_list_find_value(buttons, 2);
supplyPackValue = ds_list_find_value(button.values, button.value);

    //open file
    ini_open("options.ini");
    
    //save data
    section = "debug";
    
    ini_section_delete(section);
    ini_write_string(section, "deactivateOutside", deactivateOutside);
    ini_write_string(section, "yallVehicleCircles", yallVehicleCircles);
    ini_write_real(section, "supplyPackValue", supplyPackValue);
    
    //delete default lists
    //ds_list_clear(nicknamesDefault);
    
    //close file
    ini_close(); 
    
//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu
    var button = instance_create(room_width/2-32, 128, obj_button);
    with(button) {
        action = "value";
        title = "Game Mode";
        ds_list_add(values, "Bomb Apocalypse", "Zombie Bomb Apocalypse", "Zombie Jackal");
        value = ds_list_find_index(values, other.gameMode);
        }
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-160, obj_button);
    button.image_index = 5;
    button.action = "addNickname";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-128, obj_button);
    button.image_index = 6;
    button.action = "delNickname";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-80, obj_button);
    button.image_index = 7;
    button.action = "debugOptions";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-32, obj_button);
    button.image_index = 3;
    button.action = "mainOptions";
    ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to debug options menu
menu = "debugOptions";

//save options
scr_saveOptions();
    
//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug options menu
    var button = instance_create(room_width/2-32, 128, obj_button);
    with(button) {
        action = "value";
        title = "Deactivate Instance Outside of View";
        ds_list_add(values, "All", "All but Bombs and Walls", "None");
        value = ds_list_find_index(values, other.deactivateOutside);
        }
    ds_list_add(buttons, button);
    //yallVehicleCircles
    var button = instance_create(room_width/2-32, 128+32, obj_button);
    with(button) {
        action = "value";
        title = "Draw Command Vehicle Circles";
        ds_list_add(values, "On", "Off");
        value = ds_list_find_index(values, other.yallVehicleCircles);
        }
    ds_list_add(buttons, button);
    //supplyPackValue
    var button = instance_create(room_width/2-32, 128+32*2, obj_button);
    with(button) {
        action = "value";
        title = "Supply Pack Value";
        ds_list_add(values, 25, 50, 75);
        value = ds_list_find_index(values, other.supplyPackValue);
        }
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-112, obj_button);
    button.image_index = 9;
    button.action = "delOptions";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-80, obj_button);
    button.image_index = 8;
    button.action = "delMissions";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-32, obj_button);
    button.image_index = 4;
    button.action = "optionsDebug";
    ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to options menu
menu = "options";

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu
    var button = instance_create(room_width/2-32, 128, obj_button);
    with(button) {
        action = "value";
        title = "Game Mode";
        ds_list_add(values, "Bomb Apocalypse", "Zombie Bomb Apocalypse", "Zombie Jackal");
        value = ds_list_find_index(values, other.gameMode);
        }
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-160, obj_button);
    button.image_index = 5;
    button.action = "addNickname";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-128, obj_button);
    button.image_index = 6;
    button.action = "delNickname";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-80, obj_button);
    button.image_index = 7;
    button.action = "debugOptions";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-32, obj_button);
    button.image_index = 3;
    button.action = "mainOptions";
    ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to main from options
menu = "main";

//save options
scr_saveOptions();
    
//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main menu
var button = instance_create(room_width/2, 176, obj_button);
button.image_index = 0;
button.action = "lobby";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, 176+48, obj_button);
button.image_index = 4;
button.action = "options";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, room_height-64, obj_button);
button.image_index = 1;
button.action = "quit";
ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to finish menu

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finish menu - save
    //update data
    switch(obj_menu.gameMode) {
        case("Bomb Apocalypse"):
        case("Zombie Jackal"):
            oldRescuedRate = ds_list_find_value(roomSuccessRates, roomSelected);
            oldTime = ds_list_find_value(roomTimes, roomSelected);
            if (oldTime = 0 || rescuedRate &gt; oldRescuedRate) {
                ds_list_replace(roomSuccessRates, roomSelected, rescuedRate);
                ds_list_replace(roomTimes, roomSelected, time);
                }
            else if (rescuedRate = oldRescuedRate &amp;&amp; time &lt; oldTime) {
                ds_list_replace(roomSuccessRates, roomSelected, rescuedRate);
                ds_list_replace(roomTimes, roomSelected, time);
                }
            break;
        case("Zombie Bomb Apocalypse"):
            oldTime = ds_list_find_value(roomTimes, roomSelected);
            if (time &gt; oldTime) {
                ds_list_replace(roomSuccessRates, roomSelected, rescuedRate);
                ds_list_replace(roomTimes, roomSelected, time);
                }
            break;
        }
    
    //open file
    ini_open(gameMode + ".ini");
    
    //save data
    section = string(ds_list_size(players));
    
    ini_section_delete(section);
    ini_write_string(section, "rooms", ds_list_write(rooms));
    ini_write_string(section, "roomTitles", ds_list_write(roomTitles));
    ini_write_string(section, "roomSuccessRates", ds_list_write(roomSuccessRates));
    ini_write_string(section, "roomTimes", ds_list_write(roomTimes));
    
    //destroy default lists
    ds_list_clear(rooms);
    //ds_list_clear(roomTitles);
    ds_list_clear(roomSuccessRates);
    ds_list_clear(roomTimes);
    
    //close file
    ini_close(); 
    
    //add buttons
    var button = instance_create(room_width-96, room_height-32, obj_button);
    button.image_index = 2;
    button.action = "missions";
    ds_list_add(buttons, button);
    var button = instance_create(96, room_height-32, obj_button);
    button.image_index = 1;
    button.action = "quit";
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-32, obj_button);
    button.image_index = 3;
    button.action = "restart";
    ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to game menu
menu = "game";

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game menu

//goto room
room_goto(ds_list_find_value(rooms, roomSelected));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to missions menu
menu = "missions";

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///missions menu
var button = instance_create(room_width-96, room_height-32, obj_button);
button.image_index = 0;
button.action = "game";
ds_list_add(buttons, button);
var button = instance_create(96, room_height-32, obj_button);
button.image_index = 1;
button.action = "quit";
ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-32, obj_button);
    button.image_index = 3;
    button.action = "restart";
    ds_list_add(buttons, button);

//load room data
playerAmount = ds_list_size(players);

//open file
ini_open(gameMode + ".ini");

section = string(playerAmount);
//load data
var str;
str = ini_read_string(section, "rooms", "");
if (str != "") ds_list_read(rooms, str);
else rooms = roomsDefault;
str = ini_read_string(section, "roomTitles", "");
if (str != "") ds_list_read(roomTitles, str);
else roomTitles = roomTitlesDefault;
str = ini_read_string(section, "roomSuccessRates", "");
if (str != "") ds_list_read(roomSuccessRates, str);
else roomSuccessRates = roomSuccessRatesDefault;
str = ini_read_string(section, "roomTimes", "");
if (str != "") ds_list_read(roomTimes, str);
else roomTimes = roomTimesDefault;
//destroy default lists

//close file
ini_close(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to lobby menu
menu = "lobby";

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lobby menu

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lobby menu
if (menu == "lobby") {
    //draw background
    draw_sprite(spr_menu, 0, 0, 0);
    
    //set up drawing
    draw_set_font(fnt_command);
    
    //draw players
    draw_set_colour(c_white);
    for (var i = 0; i &lt; ds_list_size(players); i ++) {
        draw_rectangle(32, 32 + 32*i, room_width-32, 64+32*i, true);
        draw_text(48, 40 + 32*i, ds_list_find_value(nicknames, i));
        draw_text(240, 40 + 32*i, "Class: " + ds_list_find_value(classes, i));
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///missions menu
if (menu == "missions") {
    //set up drawing
    draw_set_font(fnt_command);
    draw_set_colour(c_white);
    
    //draw title
    draw_sprite(spr_menu, 1, 0, 0);
    
    //draw selected room list
    for (var i = 0; i &lt; ds_list_size(rooms); i ++) {
        draw_rectangle(32, 32 + 32*i, room_width-32, 64+32*i, true);
        draw_text(48, 40 + 32*i, ds_list_find_value(roomTitles, i));
        draw_text(304, 40 + 32*i, "Success Rate: " + string(ds_list_find_value(roomSuccessRates, i)) + "%");
        draw_text(480, 40 + 32*i, "Time: " + string(ds_list_find_value(roomTimes, i)));
        }
    
    //draw selected
    draw_sprite(spr_selector, -1, 16, 48 + 32*roomSelected);
    draw_sprite(spr_minimap, roomSelected, 32, 320);
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finish menu
if (menu == "finish") {
    //draw set up
    draw_set_font(fnt_command);
    draw_set_color(c_white);
    
    //draw title
    draw_sprite(spr_menu, 2, 0, 0);
    
    //draw selected room list
        i = 1;
        draw_rectangle(32, 32 + 32*i, room_width-32, 64+32*i, true);
        draw_text(48, 40 + 32*i, "Your Score: ");//ds_list_find_value(roomTitles, roomSelected));
        draw_text(304, 40 + 32*i, "Success Rate: " + string(rescuedRate) + "%");
        draw_text(480, 40 + 32*i, "Time: " + string(time));
        //best
        i = 0;
        draw_rectangle(32, 32 + 32*i, room_width-32, 64+32*i, true);
        draw_text(48, 40 + 32*i, "Previous Best: ");
        draw_text(304, 40 + 32*i, "Success Rate: " + string(oldRescuedRate) + "%");
        draw_text(480, 40 + 32*i, "Time: " + string(oldTime));
    
    //draw stats
    var nameX = 224;
    draw_set_color(c_lime);
    draw_text(48, 40 + 96, "Hero: ");
    draw_text(nameX, 40 + 96+24*0, followTheLeader);
    draw_text(room_width/2 + 48, 40 + 96, string(followTheLeaderA) + " Rescued");
    
    draw_set_color(c_white)
    draw_text(48, 40 + 96+24*2, "Road Trip: ");
    draw_text(nameX, 40 + 96+24*2, roadTrip);
    draw_text(room_width/2 + 48, 40 + 96+24*2, string(roadTripA) + " Minutes Spent Driving");
    draw_text(48, 40 + 96+24*3, "Im Radioactive: ");
    draw_text(nameX, 40 + 96+24*3, imRadioactive);
    draw_text(room_width/2 + 48, 40 + 96+24*3, string(imRadioactiveA) + " Seconds Spent in Radiation");
    
    draw_set_color(c_red);
    draw_text(48, 40 + 96+24*5, "Follow till Death: ");
    draw_text(nameX, 40 + 96+24*5, badLeader);
    draw_text(room_width/2 + 48, 40 + 96+24*5, string(badLeaderA) + " Died While Following");
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw buttons
    //draw set up
    draw_set_font(fnt_command);
    
    //draw buttons
    for (var i = 0; i &lt; ds_list_size(buttons); i++) {
        var button = ds_list_find_value(buttons, i);
        if (button.action == "value") {
            //draw value button
            draw_set_color(c_white);
            draw_text(button.x - string_width(button.title) - 16, button.y-8, button.title);
            draw_text(button.x + 64+16, button.y-8, string(ds_list_find_value(button.values, button.value)));
            draw_set_color(c_aqua);
            draw_rectangle(button.x, button.y-8, button.x+64, button.y+16-8, true);
            draw_set_color(c_blue);
            var sliderWidth = (62/ds_list_size(button.values))
            draw_rectangle(button.x+1+button.value*sliderWidth, button.y+1-8, button.x+1+button.value*sliderWidth+sliderWidth, button.y+1+14-8, true);
            }
        else draw_sprite(spr_button, button.image_index, button.x, button.y)
        }
    //draw selector
    if (ds_list_size(buttons) &gt; 0) {
        var button = ds_list_find_value(buttons, selected);
        var woffset = string_width(button.title)/2 + 48;
        if (instance_exists(button)) draw_sprite(spr_selector, -1, button.x-woffset - 32, button.y);
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main menu
if (menu == "main") {
    //draw title
    draw_sprite(spr_title, -1, room_width/2, room_height/6);
    
    //set up drawing
    draw_set_font(fnt_command);
    draw_set_colour(c_yellow);
    
    //tag line
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_ext_transformed(room_width/2+88+48, room_height/6+32, tagLine, 14, 300, 1, 1, 45);
    
    draw_set_colour(c_white);
    //draw
    draw_text(room_width/2+100, room_height/6+14+8, "V: " + string(version));
    draw_text(room_width/2, room_height-32, "Developed by: Isaiah and Gabriel Frey");
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//end game
if !(instance_exists(obj_inputButton)) {
    game_end();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
