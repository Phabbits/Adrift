<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//following
following = noone;
//state
state = "idle";
//YALLCHECKZONE
YALLCHECKZONE = 128;
//getIn - vehicle citizen is to enter
getIn = noone;
//civilian - whether or not a civilian
civilian = true;
//stopFollowing - done here not in for loops, string for next state
stopFollowing = "";
//justStopped - used for short scatter after finish following
justStopped = false;
//playerInput
playerInput = 0;
//moveSpeed - speed of mob
moveSpeed = 1;
//stop animation
image_speed = 0;
//dirX, dirY direction
dirX = 0;
dirY = 0;
//nHealth - native health
nHealth = 30;
//nHealthMax
nHealthMax = 30;
//active - whether object is active
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set random dir
dirX = irandom_range(-1, 1);
if (dirX = 0) dirY = irandom_range(-1, 1);
else dirY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keep inside of room
if (x &lt; 0) x = 0;
if (y &lt; 0) y = 0;
if (x &gt; room_width) x = room_width;
if (y &gt; room_height) y = room_height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///states
if (active) {
    //check following
    following = instance_nearest(x, y, par_mob);
    if (instance_exists(following)) {
        //check if fallen too far back
        if (distance_to_point(following.x, following.y) &gt; YALLCHECKZONE) {
            //stop following
            stopFollowing = "idle";
            }
        else {
            state = "follow";
            }
        }
    else {
        if (state == "follow") state = "idle";
        }
 
//states  
switch(state) {
    case("idle"):
        //move randomly
        hspeed = moveSpeed*dirX;
        vspeed = moveSpeed*dirY;
        //if alarm not set, set
        if (alarm[0] &lt; 0) alarm[0] = irandom_range(40, 50);
        break;
    case("stay"):
        //stop
        hspeed = 0;
        vspeed = 0;
        //if alarm not set, set
        if (alarm[1] &lt; 0) alarm[1] = irandom_range(80, 100);
        break;
    case("follow"):
        //follow
        followX = following.x;
        followY = following.y;
        if (!place_meeting(x, y, par_vehicle)) mp_potential_step(followX, followY, moveSpeed, false);
        break;
    }
    if (stopFollowing != "") {
        state = stopFollowing;
        //reset stopFollowing
        stopFollowing = "";
        }
    }

//collide with solid objects
    while(!place_free(x+hspeed,y))
    {
        hspeed = scr_reduce(hspeed);
        if hspeed = 0 break;
    }
    
    while(!place_free(x+hspeed,y+vspeed+1))
    {
        vspeed = scr_reduce(vspeed);
        if vspeed = 0 break;
    }
//collide with car
    with(instance_place(x+hspeed, y+hspeed, par_vehicle)) {
        nHealth -= 1;
        with(other) {
            hspeed = 0;
            vspeed = 0;
            speed = 0;
            }
        }
    
//collide with explosion
    if (instance_place(x, y, explosion)) nHealth -= 20;
    if (instance_place(x, y, MissleExplosion)) nHealth -= 7;
    //if (instance_place(x, y, obj_radiation)) {
    //    if (nHealth &lt; nHealthMax) nHealth += .1;
    //    }
    with (instance_place(x, y, BombPiece)) {
        other.nHealth -= 1;
        //destroy other
        instance_destroy();
        }
    with (instance_place(x, y, BigBomb90)) {
        other.nHealth -= 1;
        //destroy other
        instance_destroy();
        }

//collide with bullets
    with (instance_place(x, y, obj_bullet)) {
        other.nHealth -= 30;
        //destroy other
        instance_destroy();
        }

//die
    if (nHealth &lt; 1) {
        scr_createCorpse("zombie");
        instance_destroy();
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active) {
    draw_healthbar(x-8, y + 8, x + 14-8, y + 14-8, (nHealth/nHealthMax)*100, c_black, c_red, c_green, 180, true, false);
    draw_self();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
