<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_crane</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>par_vehicle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
//driver - person who is driving
driver = noone;
//driverImage - image of driver
driverImage = 0;
//driverInput - input of driver
driverInput = 0;
//driverId - id of driver
driverId = noone;
//driverObjectId - id of object of driver
dirverObjectId = 0;

//passengerAmount
passengerAmount = 0;
//passengers
passengers[0] = self;

//nHealth - car health
nHealth = 100;
nHealthMax = nHealth;
//stop animation
image_speed = 0;

//actionInputFreeze
actionInputFreeze = 0;
//actionInputFreezeMax
actionInputFreezeMax = 10;

//maxSpeed
maxSpeed = 0;

//nativeDrive - whether or not a native drivable vehicle
nativeDrive = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//exit mechanic
if (driverInput = 0) {
    event_user(1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input
    //driver
    if (script_execute(scr_idExist, driver)) {
        //action - keys
        actionReleased = false;
        
        //axisBuffer - buffer till push starts counting
        axisBuffer = 0.4;
        
        //Player
        switch(driverInput) {
            case 1:
                //input
                input = 0;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 2:
                //input
                input = 1;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 3:
                //input
                input = 2;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 4:
                //input
                input = 3;
                actionReleased = gamepad_button_check_released(input, gp_face1);
                break;
            case 5:
                //input
                actionReleased = keyboard_check_pressed(vk_numpad0);
                break;
            case 6:
                //input
                actionReleased = keyboard_check_pressed(ord("F"));
                break;
            case 7:
                //input
                actionReleased = keyboard_check_pressed(186);
                break;
            case 8:
                //input
                actionReleased = keyboard_check_pressed(vk_numpad3);
                break;
            case 0:
                //input
                if (alarm[0] &lt;= 0) {
                    //actionReleased = choose(false, true);
                    alarm[0] = irandom_range(50, 100);
                    }
                break;
            }
        //freeze action
        if (actionInputFreeze &gt; 0) {
            actionReleased = false;
            actionInputFreeze--;
            }
        
        //disX, disY - Distance from X and Y
        disX = 0;
        disY = 0;
        //find dir &amp; heal car
        with (instance_nearest(x, y, par_vehicle)) {
            if (distance_to_object(other) &lt; 8) {
                other.disX = (x - other.x);
                other.disY = (y - other.y);
                
                //heal car
                if (nHealth &lt;= nHealthMax) {
                    nHealth += 0.1;
                    //Mechanic
                    if (driverInput = 0) {
                        //input
                        alarm[1] = irandom_range(50, 100);
                        }
                    }
                }
            }
        dir = script_execute(scr_findDir, disX, disY, 10);
        if (dir &lt; 8) image_index = dir;
        
        //leave crane
        if (actionReleased) {
            event_user(1);
            }
        }

//collide with explosion
    if (instance_place(x, y, explosion)) nHealth -= 20;
    if (instance_place(x, y, MissleExplosion)) nHealth -= 7;
    //if (instance_place(x, y, obj_radiation)) nHealth -= .1;
    if (instance_place(x, y, obj_explosionCar)) nHealth -= 1;
    if (instance_place(x, y, NukeExplosion)) nHealth -= 40;
    with (instance_place(x, y, BigBomb90)) {
        other.nHealth -= 3;
        //destroy other
        instance_destroy();
        }
    with (instance_place(x, y, BombPiece)) {
        other.nHealth -= 1;
        //destroy other
        instance_destroy();
        }
//damage 
    if (nHealth &lt; 50) sprite_index = spr_craneDamaged;
    else sprite_index = spr_crane;

//die
    if (nHealth &lt; 1) {
        //drop driver
        event_user(1);
        //drop passenger
        event_user(3);
        
        //create explosion
        instance_create(x, y, obj_explosionCar);
        //destroy self
        instance_destroy();
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update driver position
    //driver
    if (script_execute(scr_idExist, driver)) {
        driver.x = x;
        driver.y = y;
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw HUD
var portHeight = display_get_gui_height();
//draw set up
draw_set_font(fnt_HUD);
draw_set_color(c_white);

//if driver exist
if (instance_exists(driver)) {
    //draw HUD bar
    if !(driver.civilian) {
        draw_sprite_ext(spr_HUDBar, driver.image_index, driver.playerId*80*portScale, portHeight - 36*portScale, portScale, portScale, 0, c_white, 1);
        //sep 100 - so new line wont be seen
        var sep = 100*portScale;
        draw_text_ext(driver.playerId*80*portScale+2*portScale, portHeight - 36*portScale, driver.nickname, sep, 78*portScale);
        //draw supplies
        draw_text(driver.playerId*80*portScale+17*portScale, portHeight - 20*portScale, driver.supplyblue);
        //draw health bar
        draw_healthbar(driver.playerId*80*portScale+2*portScale, portHeight - 19*portScale, driver.playerId*80*portScale+78*portScale, portHeight - 17*portScale, driver.nHealth, c_black, c_red, c_green, 180, true, false);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw self
draw_self();

//draw set up
draw_set_font(fnt_command);
draw_set_color(c_white);
//draw health
//if (script_execute(scr_idExist, driver)) {
    draw_healthbar(x, y + 32, x + 32, y + 30, nHealth, c_black, c_red, c_green, 180, true, false);
//    }

//draw driver
if (script_execute(scr_idExist, driver)) {
    if (image_index = 0) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 90, c_white, 1);
    if (image_index = 1) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 45, c_white, 1);
    if (image_index = 2) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 0, c_white, 1);
    if (image_index = 3) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 315, c_white, 1);
    if (image_index = 4) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 270, c_white, 1);
    if (image_index = 5) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 225, c_white, 1);
    if (image_index = 6) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 180, c_white, 1);
    if (image_index = 7) draw_sprite_ext(driverImage, driver.image_index, x + 9+8, y + 9+8, 1, 1, 135, c_white, 1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
