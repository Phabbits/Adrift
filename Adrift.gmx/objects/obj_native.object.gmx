<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_native</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>par_civilian</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///call parent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moveSpeed - speed of mob
moveSpeed = 1;
//stop animation
image_speed = 0;
//dirX, dirY direction
dirX = 0;
dirY = 0;
//nHealth - native health
nHealth = 50;
nHealthMax = 50;
//active - whether object is active
active = true;
//civilian - whether or not a civilian
civilian = true;
alarm[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set random dir
dirX = irandom_range(-1, 1);
if (dirX = 0) dirY = irandom_range(-1, 1);
else dirY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_object(instance_nearest(x, y, par_player)) &lt; view_wview/2) {
///states
if (active) {
    //check following
    if (instance_exists(following)) {
        //check if fallen too far back
        if (distance_to_point(following.x, following.y) &gt; YALLCHECKZONE) {
            //stop following
            stopFollowing = "idle";
            }
        }
    else {
        if (state == "follow") state = "idle";
        }
 
    ///check for rescue
    /*
    var rescue = instance_nearest(x, y, obj_rescue);
    if (distance_to_object(rescue) &lt; 128) {
        if (following != noone) stopFollowing = "rescue";
        else state = "rescue";
        getIn = rescue;
        }
    */
//states  
switch(state) {
    case("idle"):
        //move randomly
        hspeed = moveSpeed*dirX;
        vspeed = moveSpeed*dirY;
        //if alarm not set, set
        if (alarm[0] &lt; 0) {
            alarm[0] = irandom_range(40, 50);
            }
        break;
    case("stay"):
        //stop
        hspeed = 0;
        vspeed = 0;
        //if alarm not set, set
        if (alarm[1] &lt; 0) alarm[1] = irandom_range(240, 300);
        break;
    case("follow"):
        //follow
        followX = following.x;
        followY = following.y;
        if (distance_to_point(followX, followY) &gt; 32) {
            mp_potential_step(followX, followY, moveSpeed, false);
            justStopped = true;
            }
        else {
            //short scatter
            if (justStopped) {
            hspeed = choose(-1, 1);
            vspeed = choose(-1, 1);
            alarm[2] = 30;
            justStopped = false;
            }
            }
        break;
    case("getIn"):
        if (instance_exists(getIn)) {
            mp_potential_step(getIn.x+getIn.sprite_width/2, getIn.y+getIn.sprite_height/2, moveSpeed, false);
            //enter vehicle
            with (instance_place(x + hspeed, y + vspeed, getIn)) {
                if (nativeDrive &amp;&amp; driver = noone) {
                    driver = other;
                    
                    //change state for when leaving the vehicle
                    other.state = "stay";
                    
                    //change driver
                    event_user(0);
                    }
                else {
                    for (i = 0; i &lt; passengerAmount; i++) {
                        var passenger = passengers[i];
                        if !(instance_exists(passenger)) {
                            passengers[i] = other;
                            
                            //deactivate
                            other.active = false;
                            //state
                            other.state = "stay";
                            //change passenger
                            event_user(2);
                            
                            break;
                            }
                        }
                    }
                }
            }
        else {
            state = "idle";
            scr_addCommand("Don't done exists no more.");
            }
        break;
    case("rescue"):
        if (instance_exists(getIn)) {
            mp_potential_step(getIn.x, getIn.y, moveSpeed, false);
            //enter vehicle
            with (instance_place(x + hspeed, y + vspeed, obj_rescue)) {
                obj_camera.rescued += 1;
                if (instance_exists(other.leader)) other.leader.rescued ++;
                with (other) instance_destroy();
                }
            }
        else {
            state = "idle";
            }
        break;
    }
    if (stopFollowing != "") {
        scr_stopFollowing(id);
        state = stopFollowing;
        //reset stopFollowing
        stopFollowing = "";
        }
    }

//collide with solid objects
    while(!place_free(x+hspeed,y))
    {
        hspeed = scr_reduce(hspeed);
        if hspeed = 0 break;
    }
    
    while(!place_free(x+hspeed,y+vspeed+1))
    {
        vspeed = scr_reduce(vspeed);
        if vspeed = 0 break;
    }

//die
    if (nHealth &lt; 1) {
        scr_createCorpse("civlian");
        //stats
        if (instance_exists(following)) {
            leader.followersKilled ++;
            }
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_object(instance_nearest(x, y, par_player)) &lt; view_wview/2) {
if (active) {
draw_healthbar(x-8, y + 8, x + 14-8, y + 14-8, (nHealth/nHealthMax)*100, c_black, c_red, c_green, 180, true, false);

draw_self()
/*
if (instance_exists(following)) {
    draw_line(x, y, following.x, following.y);
    }
    */
    }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
