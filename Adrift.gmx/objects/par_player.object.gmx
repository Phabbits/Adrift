<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_mob</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shared variables
//followers
followers = ds_list_create();
//selected - temporary holding command for you
selected = noone;
//direction
dir = 0;
//checkX, checkY - temporary checking variables for commands
checkX = 0;
checkY = 0;
//civilian - whether or not a civilian
civilian = false;
//nicknames
nickname = "";
//playerId - used for HUD
playerId = 0;
//actionInputFreeze - used in keyboard input
actionInputFreeze = 0;
//actionInputFreezeMax
actionInputFreezeMax = 10;

//followState - temporary variable used in yall commands
followState = "follow";
//justEvacuated - temporary variable used in evacutaion
justEvacuated = false;

//statTracker
statTracker = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///class
classActionBuffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input
        //left, up, right, down, action - keys
        haxis1 = 0;
        vaxis1 = 0;
        actionReleased = false;
        buildIsPressed = false;
        buildPressed = false;
        buildReleased = false;
        convertReleased = false;
        yallPressed = false;
        yallIsPressed = false;
        yallReleased = false;
        youPressed = false;
        youReleased = false;
        
        //axisBuffer - buffer till push starts counting
        axisBuffer = 0.4;
        
        //Player
        switch(playerInput) {
            case 1:
                //input
                input = 0;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                buildIsPressed = gamepad_button_check(input, gp_face3);
                buildPressed = gamepad_button_check_pressed(input, gp_face3);
                buildReleased = gamepad_button_check_released(input, gp_face3);
                convertReleased = gamepad_button_check_released(input, gp_padu);
                yallPressed = gamepad_button_check_pressed(input, gp_face4);
                yallIsPressed = gamepad_button_check(input, gp_face4);
                yallReleased = gamepad_button_check_released(input, gp_face4);
                youPressed = gamepad_button_check_pressed(input, gp_face2);
                youReleased = gamepad_button_check_released(input, gp_face2);
                break;
            case 2:
                //input
                input = 1;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                buildIsPressed = gamepad_button_check(input, gp_face3);
                buildPressed = gamepad_button_check_pressed(input, gp_face3);
                buildReleased = gamepad_button_check_released(input, gp_face3);
                convertReleased = gamepad_button_check_released(input, gp_padu);
                yallPressed = gamepad_button_check_pressed(input, gp_face4);
                yallIsPressed = gamepad_button_check(input, gp_face4);
                yallReleased = gamepad_button_check_released(input, gp_face4);
                youPressed = gamepad_button_check_pressed(input, gp_face2);
                youReleased = gamepad_button_check_released(input, gp_face2);
                break;
            case 3:
                //input
                input = 2;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                buildIsPressed = gamepad_button_check(input, gp_face3);
                buildPressed = gamepad_button_check_pressed(input, gp_face3);
                buildReleased = gamepad_button_check_released(input, gp_face3);
                convertReleased = gamepad_button_check_released(input, gp_padu);
                yallPressed = gamepad_button_check_pressed(input, gp_face4);
                yallIsPressed = gamepad_button_check(input, gp_face4);
                yallReleased = gamepad_button_check_released(input, gp_face4);
                youPressed = gamepad_button_check_pressed(input, gp_face2);
                youReleased = gamepad_button_check_released(input, gp_face2);
                break;
            case 4:
                //input
                input = 3;
                haxis1 = gamepad_axis_value(input, gp_axislh);
                vaxis1 = gamepad_axis_value(input, gp_axislv);
                actionReleased = gamepad_button_check_released(input, gp_face1);
                buildIsPressed = gamepad_button_check(input, gp_face3);
                buildPressed = gamepad_button_check_pressed(input, gp_face3);
                buildReleased = gamepad_button_check_released(input, gp_face3);
                convertReleased = gamepad_button_check_released(input, gp_padu);
                yallPressed = gamepad_button_check_pressed(input, gp_face4);
                yallIsPressed = gamepad_button_check(input, gp_face4);
                yallReleased = gamepad_button_check_released(input, gp_face4);
                youPressed = gamepad_button_check_pressed(input, gp_face2);
                youReleased = gamepad_button_check_released(input, gp_face2);
                break;
            case 5:
                //input
                if(keyboard_check(vk_left)) haxis1 = -1;
                if(keyboard_check(vk_right)) haxis1 = 1;
                if(keyboard_check(vk_up)) vaxis1 = -1;
                if(keyboard_check(vk_down)) vaxis1 = 1;
                buildIsPressed = keyboard_check(vk_numpad1);
                buildPressed = keyboard_check_pressed(vk_numpad1);
                buildReleased = keyboard_check_released(vk_numpad1);
                actionReleased = keyboard_check_pressed(vk_numpad0);
                yallPressed = keyboard_check_pressed(vk_numpad2);
                yallIsPressed = keyboard_check(vk_numpad2);
                yallReleased = keyboard_check_released(vk_numpad2);
                youPressed = keyboard_check_pressed(vk_numpad3);
                youReleased = keyboard_check_released(vk_numpad3);
                break;
            case 6:
                //input
                if(keyboard_check(ord("A"))) haxis1 = -1;
                if(keyboard_check(ord("D"))) haxis1 = 1;
                if(keyboard_check(ord("W"))) vaxis1 = -1;
                if(keyboard_check(ord("S"))) vaxis1 = 1;
                buildIsPressed = keyboard_check(ord("G"));
                buildPressed = keyboard_check_pressed(ord("G"));
                buildReleased = keyboard_check_released(ord("G"));
                actionReleased = keyboard_check_pressed(ord("F"));
                yallPressed = keyboard_check_pressed(ord("T"));
                yallIsPressed = keyboard_check(ord("T"));
                yallReleased = keyboard_check_released(ord("T"));
                youPressed = keyboard_check_pressed(ord("H"));
                youReleased = keyboard_check_released(ord("H"));
                break;
            case 7:
                //input
                if(keyboard_check(ord("J"))) haxis1 = -1;
                if(keyboard_check(ord("L"))) haxis1 = 1;
                if(keyboard_check(ord("I"))) vaxis1 = -1;
                if(keyboard_check(ord("K"))) vaxis1 = 1;
                buildIsPressed = keyboard_check(188);//'
                buildPressed = keyboard_check_pressed(188);//'
                buildReleased = keyboard_check_released(188);//'
                actionReleased = keyboard_check_pressed(186);//;
                yallPressed = keyboard_check_pressed(219);//[
                yallIsPressed = keyboard_check(219);//[
                yallReleased = keyboard_check_released(219);//[
                youPressed = keyboard_check_pressed(vk_enter);
                youReleased = keyboard_check_released(vk_enter);
                break;
            case 8:
                //input
                if(keyboard_check(vk_left)) haxis1 = -1;
                if(keyboard_check(vk_right)) haxis1 = 1;
                if(keyboard_check(vk_up)) vaxis1 = -1;
                if(keyboard_check(vk_down)) vaxis1 = 1;
                actionReleased = keyboard_check(vk_numpad3);
                buildReleased = keyboard_check(222);
                convertReleased = keyboard_check(219);
                break;
            case 0:
                //input
                if (alarm[0] &lt;= 0) {
                    haxis1 = choose(1, 0, -1);
                    haxis1 = choose(1, 0, -1);
                    action = choose(false, true);
                    alarm[0] = irandom_range(10, 20);
                    }
                break;
            }
        //axis check
        if (haxis1 &lt; axisBuffer and haxis1 &gt; -axisBuffer) haxis1 = 0;
        if (vaxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer) vaxis1 = 0;
        //freeze action
        if (actionInputFreeze &gt; 0) {
            actionReleased = false;
            actionInputFreeze--;
            }
        
        //move_speed - Speed of character
        move_speed = 1;
        //Find current hspeed
        if !(haxis1 &gt; -axisBuffer and haxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer and vaxis1 &lt; axisBuffer) {
            hspeed = haxis1*move_speed;
            vspeed = vaxis1*move_speed;
            //direction
            dir = point_direction(x, y, x+haxis1, y+vaxis1);
            //image_angle = dir;
            }
        else {
            hspeed = 0;
            vspeed = 0;
            }
        //image
        image_angle = dir;

//action
if (actionReleased) {
    //if car is present enter car
    with (instance_place(x, y, par_vehicle)) {
        if (driver = noone) {
            driver = other;
            
            //change driver
            event_user(0);
            }
        else {
            for (i = 0; i &lt; passengerAmount; i++) {
                var passenger = passengers[i];
                if !(instance_exists(passenger)) {
                    passengers[i] = other;
                    
                    //deactivate
                    other.active = false;
                    //change passenger
                    event_user(2);
                    
                    break;
                    }
                }
            }
        }
    //if rescue is present leave
    with (instance_place(x, y, obj_rescue)) {
        obj_camera.rescuedPlayers ++;
        with (other) instance_destroy();
        }
    }

//yallCommand
if (yallPressed) {
    len = 16;
    checkX = x + lengthdir_x(len, dir);
    checkY = y + lengthdir_y(len, dir);
    //order accordingly
    if (place_meeting(checkX, checkY, par_vehicle)) { //vehicle
        //evacuate
        with (instance_place(checkX, checkY, par_vehicle)) {
            scr_evacuateCivilians(other);
            other.justEvacuated = true;
            }
        //add command
        scr_addCommand(nickname + ": " + "Y'all roll out!");
        }
    else {
    //check followers
    //if (ds_list_empty(followers)) {
        //select nearest people
        with (par_civilian) {
            //if not already following someone
            if (following == noone &amp;&amp; active) {
                //check within certain distance
                if (distance_to_object(other) &lt; YALLCHECKZONE) {
                    //check if in same room
                    if !(collision_line(x, y, other.x, other.y, par_wall, false, true)) {
                        //add to followers
                        following = other;
                        ds_list_add(other.followers, id);
                        }
                    }
                }
            }
        }
    //    }
    }
if (yallReleased) {
    //command - temporary variable to hold command
    var command = "";
    //len - check distance
    len = 16;
    checkX = x + lengthdir_x(len, dir);
    checkY = y + lengthdir_y(len, dir);
    //order accordingly
    if !(justEvacuated) {
    if (place_meeting(checkX, checkY, par_vehicle)) { //vehicle
        for(var i = 0; i &lt; ds_list_size(followers);i++) {
            with (ds_list_find_value(followers, i)) {
                stopFollowing = "getIn";
                getIn = instance_place(other.checkX, other.checkY, par_vehicle);
                }
            }
        command = "Y'all get in";
        }
    else if (place_meeting(checkX, checkY, obj_rescue)) { //rescue
        //rescue civilians
        for(var i = 0; i &lt; ds_list_size(followers);i++) {
            with (ds_list_find_value(followers, i)) {
                stopFollowing = "rescue";
                getIn = instance_place(other.checkX, other.checkY, obj_rescue);
                }
            }
        command = "Y'all run along now";
        }
    else {
        //find last follower's state for command
        followState = "follow";
        if (!ds_list_empty(followers)) {
            with(ds_list_find_value(followers, ds_list_size(followers)-1)) {
                if (state == "follow") other.followState = "stay";
                }
            }
        for(var i = 0; i &lt; ds_list_size(followers);i++) {
            with (ds_list_find_value(followers, i)) {
                if (other.followState == "stay") {
                    //stop following
                    stopFollowing = "stay";
                    command = "Y'all just stay here for a while";
                    }
                else {
                    state = "follow";
                    leader = other.statTracker;
                    command = "Y'all follow me";
                    }
                }
            }
        }
    //add command
    if (command != "") scr_addCommand(nickname + ": " + command);
    }
    //reset justEvacuated
    justEvacuated = false;
    }
    
//youCommand
if (youPressed) {
    //len - check distance
    len = 16;
    checkX = x + lengthdir_x(len, dir);
    checkY = y + lengthdir_y(len, dir);
    with(instance_place(checkX, checkY, par_civilian)) {
        //check if following
        if (following == noone &amp;&amp; active) {
            //add to followers
            following = other;
            ds_list_add(other.followers, id);
            //select
            other.selected = id;
            }
        else if (following == other.id &amp;&amp; active) {
            //select
            other.selected = id;
            }
        }
    }
if (youReleased) {
    //command - temporary variable to hold command
    var command = "";
    //len - check distance
    len = 16;
    checkX = x + lengthdir_x(len, dir);
    checkY = y + lengthdir_y(len, dir);
    //order accordingly
    with (selected) {
        if (place_meeting(other.checkX, other.checkY, par_vehicle)) { //vehicle
            stopFollowing = "getIn";
            getIn = instance_place(other.checkX, other.checkY, par_vehicle);
            command = "You get in";
            }
        else if (place_meeting(other.checkX, other.checkY, obj_rescue)) { //rescue
            stopFollowing = "rescue";
            getIn = instance_place(other.checkX, other.checkY, obj_rescue);
            command = "You run along now";
            }
        else {
            if (state == "follow") {
                stopFollowing = "stay";
                command = "You stay here";
                }
            else {
                state = "follow";
                leader = other.statTracker;
                command = "You follow me";
                }
            }
        }
    //reset selected
    selected = noone;
    //add command
    if (command != "") scr_addCommand(nickname + ": " + command);
    }

if (buildIsPressed) {
    switch(class) {
        case "marine":
        case "engineer":
            classActionBuffer ++;
            break;
        }
    }

//classAction
if (buildReleased) {
    //len - check distance
    len = 16;
    checkX = x + lengthdir_x(len, dir);
    checkY = y + lengthdir_y(len, dir);
    
    //struggle
    var zombieStruggle = instance_place(x, y, obj_zombie)
    if !(instance_exists(zombieStruggle)) zombieStruggle = instance_place(checkX, checkY, obj_zombie);
    if (supplyblue &gt; 1 &amp;&amp; instance_exists(zombieStruggle)) {
        with(zombieStruggle) {
            nHealth -= 5;
            other.supplyblue -= 2
            }
        }
    else {
    //class
    switch(class) {
        case "mechanic":
            if (supplyblue &gt; 4) {
                vehicle = instance_place(checkX, checkY, par_vehicle)
                with (vehicle) {
                    if (nHealth &lt; nHealthMax) {
                        nHealth += 5;
                        if (nHealth &gt; nHealthMax) nHealth = nHealthMax;
                        other.supplyblue -= 5;
                        }
                    }
                }
            break;
        case "medic":
            if (supplyblue &gt; 0) {
                radiation = instance_place(checkX, checkY, obj_radiation);
                with (radiation) {
                    instance_destroy();
                    other.supplyblue -= 1;
                    }
                }
            if (supplyblue &gt; 2) {
                mob = instance_place(checkX, checkY, par_mob);
                if(mob == id) mob = noone;
                with (mob) {
                    if (nHealth &lt; nHealthMax) {
                        nHealth += 5;
                        if (nHealth &gt; nHealthMax) nHealth = nHealthMax;
                        other.supplyblue -= 3;
                        }
                    }
                }
            break;
        case "marine":
            //if car is present enter car
            if (place_meeting(x, y, par_vehicle)) {
                with (instance_place(x, y, par_vehicle)) {
                        for (i = 0; i &lt; passengerAmount; i++) {
                            var passenger = passengers[i];
                            if !(instance_exists(passenger)) {
                                passengers[i] = other;
                                
                                //deactivate
                                other.active = false;
                                //change passenger
                                event_user(2);
                                
                                break;
                                }
                            }
                    }
                }
            if (supplyblue &gt;= 5) {
                if (classActionBuffer &gt; 30) {
                    //fire missle
                    with (instance_create(x, y, obj_missle)) {
                        speed = 6;
                        image_angle = other.dir;
                        sprite_index = spr_rocket;
                        direction = other.dir;
                        }
                    }
                else {
                    //fire gun
                    var bullet = instance_create(x, y, obj_bullet);
                    bullet.direction = dir;
                    bullet.image_angle = dir;
                    
                    //supply
                    supplyblue -= 5;
                    }
                }
            break;
        case "disarmer":
            if (supplyblue &gt;= 1) {
                //disarm
                with (instance_place(x, y, BombSignal)) {
                    disarmed -= 1;
                    
                    //supply
                    other.supplyblue -= 1;
                    }
                with (instance_place(x, y, BigBomb)) {
                    disarmed -= 1;
                    
                    //supply
                    other.supplyblue -= 1;
                    }
                with (instance_place(x, y, Nuke)) {
                    disarmed -= 1;
                    
                    //supply
                    other.supplyblue -= 1;
                    }
                }
            break;
        case "engineer":
            if (supplyblue &gt; 5 &amp;&amp; classActionBuffer &gt; 3) {
                var wall = instance_place(checkX, checkY, par_wall);
                if (collision_point(checkX, checkY, par_wall, false, true)) {
                    with(wall) instance_destroy();
                    
                    //subtract supplys
                    supplyblue -= 4;
                    }
                else if (place_free(checkX, checkY) &amp;&amp; !place_meeting(checkX, checkY, par_vehicle)) {
                    //create rubble
                    instance_create(round((checkX-8)/16)*16, round((checkY-8)/16)*16, barrier)
                    
                    //subtract supplys
                    supplyblue -= 4;
                    }
                }
            break;
        }
        }
    //reset buffer
    classActionBuffer = 0;
    }
/*
//convert
if (convertReleased) {
    //if there is enough supplies convert
    if (supplyblue &gt; 19 &amp;&amp; alarm[0] &lt; 0) {
        if (place_free(round((x-16)/16)*16+8, round((y-16)/16)*16+8)) {
            //add disarmer
            switch (playerInput) {
                case 1:
                    global.disarm1 ++;
                    break;
                case 2:
                    global.disarm2 ++;
                    break;
                case 3:
                    global.disarm3 += 1;
                    break;
                case 4:
                    global.disarm4 ++;
                    break;
                }
            
            //subtract supplys
            supplyblue -= 20;
            
            //light up
            alarm[0] = 20;
            }
        }
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
