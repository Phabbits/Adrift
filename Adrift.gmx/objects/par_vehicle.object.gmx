<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//driver - person who is driving
driver = noone;
//driverImage - image of driver
driverImage = 0;
//driverInput - input of driver
driverInput = 0;
//driverId - id of driver
driverId = noone;
//driverObjectId - id of object of driver
dirverObjectId = 0;

//passenger - person who is the passenger
passenger = noone;
//passengerImage - image of passenger
passengerImage = 0;
//passengerInput - input of driver
passengerInput = 0;
//passengerId - id of passenger
passengerId = noone;
//passengerObjectId - id of object of passenger
passengerObjectId = 0;

//nHealth - car health
nHealth = 100;
//stop animation
image_speed = 0;


//actionInputFreeze
actionInputFreeze = 0;
//actionInputFreezeMax
actionInputFreezeMax = 10;

//nativeDrive - whether or not a native drivable vehicle
nativeDrive = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///auto repair with mechanic
if (nHealth &lt; nHealthMax) {
    if (instance_exists(driver)) {
        if (driver.class == "mechanic") {
            if (driver.civilian) {
                nHealth ++;
                }
            else if (driver.supplyblue &gt; 0) {
                nHealth += 2;
                //keep nHealth in bounds
                if (nHealth &gt; nHealthMax) nHealth = nHealthMax;
                driver.supplyblue --;
                }
            }
        }
    }

//passenger mechanic
if (nHealth &lt; nHealthMax) {
    for (i = 0; i &lt; passengerAmount; i++) {
        var passenger = passengers[i];
        if (instance_exists(passenger)) {
            if (passenger.class == "mechanic") {
                if (passenger.civilian) {
                    nHealth ++;
                    }
                else if (passenger.supplyblue &gt; 0) {
                    nHealth += 2;
                    //keep nHealth in bounds
                    if (nHealth &gt; nHealthMax) nHealth = nHealthMax;
                    passenger.supplyblue --;
                    }
                }
            }
        if (nHealth &gt;= nHealthMax) break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keep inside of room
if (x &lt; 0) x = 0;
if (y &lt; 0) y = 0;
if (x &gt; room_width) x = room_width;
if (y &gt; room_height) y = room_height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///run over zombies
var dir = point_direction(x, y, x+hspeed, y+vspeed);
var len = sprite_width/2+16;
var cx = x + sprite_width/2;
var cy = y + sprite_height/2;
var checkX = x + lengthdir_x(len, dir);
var checkY = y + lengthdir_y(len, dir);
var rad = sprite_width/2;

/*
switch(image_index) {
    case 0:
        with(collision_triangl
        */
if (speed &gt; maxSpeed*(4/5)) {
    with(instance_place(checkX, checkY, obj_zombie)) {
        nHealth = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//input
    //driver
    if (script_execute(scr_idExist, driver)) {
        //move_speed - acculmative speed
        move_speed = 0.1;
        //maxSpeed - max speed
        maxSpeed = 4
        //left, up, right, down, action - keys
        left = false;
        right = false;
        up = false;
        down = false;
        action = false
        
        //Player
        if (driverInput = 1) {
            //input
            left = keyboard_check(vk_left);
            right = keyboard_check(vk_right);
            up = keyboard_check(vk_up);
            down = keyboard_check(vk_down);
            action = keyboard_check((vk_numpad3));
            }
        
        //Player2
        if (driverInput = 2) {
            //input
            left = keyboard_check(ord("A"));
            right = keyboard_check(ord("D"));
            up = keyboard_check(ord("W"));
            down = keyboard_check(ord("S"));
            action = keyboard_check(ord("H"));
            }
        
        //Player3
        if (driverInput = 3) {
            //input
            left = keyboard_check(ord("J"));
            right = keyboard_check(ord("L"));
            up = keyboard_check(ord("I"));
            down = keyboard_check(ord("K"));
            action = keyboard_check(vk_enter);
            }
        
        //Native
        if (driverInput = 0) {
            //input
            if (alarm[0] &lt;= 0) {
                left = choose(false, true);
                right = choose(false, true);
                up = true;
                down = choose(false, true);
                action = choose(false, true);
                alarm[0] = irandom_range(10, 20);
                }
            }
        
        //Find current hspeed
        hspeed += (right - left)*move_speed;
        vspeed += (down - up)*move_speed;
        dir = script_execute(scr_findDir, hspeed, vspeed, move_speed*2)
        if (dir = 8) dir = image_index;
        if !(script_execute(scr_changeDir, dir, image_index)) {
            hspeed -= (right - left)*move_speed;
            vspeed -= (down - up)*move_speed;
            }
        
        //Slow down
        if (right - left = 0) {
            if (hspeed &gt; move_speed*2) hspeed -= move_speed*2
            else if (hspeed &lt; -move_speed*2) hspeed += move_speed*2
            else hspeed = 0;
            }
        if (down - up = 0) {
            if (vspeed &gt; move_speed*2) vspeed -= move_speed*2
            else if (vspeed &lt; -move_speed*2) vspeed += move_speed*2
            else vspeed = 0;
            }
        
        //keep speed in check
        if (hspeed &gt; maxSpeed) hspeed = maxSpeed;
        if (hspeed &lt; -maxSpeed) hspeed = -maxSpeed;
        if (vspeed &gt; maxSpeed) vspeed = maxSpeed;
        if (vspeed &lt; -maxSpeed) vspeed = -maxSpeed;
        
        //find dir
        dir = script_execute(scr_findDir, hspeed, vspeed, move_speed*2);
        if (dir &lt; 8 and script_execute(scr_changeDir, dir, image_index)) image_index = dir;
        
        //leave car
        if (action) {
            event_user(1);
            }
        }
    else {
        //move_speed - acculmative speed
        move_speed = 0.1;
        
        //stop
        if (hspeed &gt; move_speed*2) hspeed -= move_speed*2
        else if (hspeed &lt; -move_speed*2) hspeed += move_speed*2
        else hspeed = 0;
        if (vspeed &gt; move_speed*2) vspeed -= move_speed*2
        else if (vspeed &lt; -move_speed*2) vspeed += move_speed*2
        else vspeed = 0;
        }
    
    //passenger
    if (script_execute(scr_idExist, passenger)) {
        //Player
        if (passengerInput = 1) {
            //input
            action = keyboard_check(vk_numpad3);
            }
        
        //Player2
        if (passengerInput = 2) {
            //input
            action = keyboard_check(ord("H"));
            }
        //Player3
        if (driverInput = 3) {
            //input
            action = keyboard_check(vk_enter);
            }
        
        //leave car
        if (action) {
            event_user(3);
            }
        }

//collide with solid objects
    while(!place_free(x+hspeed,y))
    {
        with (instance_place(x+hspeed, y, window)) instance_destroy();
        hspeed = scr_reduce(hspeed);
        if hspeed = 0 break;
    }
    
    while(!place_free(x+hspeed,y+vspeed))
    {
        with (instance_place(x+hspeed, y+vspeed, window)) instance_destroy();
        vspeed = scr_reduce(vspeed);
        if vspeed = 0 break;
    }

//collide with explosion
    if (instance_place(x, y, explosion)) nHealth -= 20;
    if (instance_place(x, y, MissleExplosion)) nHealth -= 7;
    //if (instance_place(x, y, obj_radiation)) nHealth -= .1;
    if (instance_place(x, y, obj_explosionCar)) nHealth -= 1;
    if (instance_place(x, y, NukeExplosion)) nHealth -= 40;
    with (instance_place(x, y, BigBomb90)) {
        other.nHealth -= 3;
        //destroy other
        instance_destroy();
        }
    with (instance_place(x, y, BombPiece)) {
        other.nHealth -= 1;
        //destroy other
        instance_destroy();
        }
//damage 
    if (nHealth &lt; 50) sprite_index = spr_carDamaged;
    else sprite_index = spr_car;

//die
    if (nHealth &lt; 1) {
        //drop driver
        event_user(1);
        //drop passenger
        event_user(3);
        
        //create explosion
        instance_create(x, y, obj_explosionCar);
        //destroy self
        instance_destroy();
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change passengers
    //freeze action input
    actionInputFreeze = actionInputFreezeMax;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change driver
if (script_execute(scr_idExist, driver)) {
    //activate driver
    driver.active = true;
    
    //actionInputFreeze
    if !(driver.civilian) {
        driver.actionInputFreeze = driver.actionInputFreezeMax;
        }
    
    //reset driver
    driver = noone;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change drivers
    //set image
    driverImage = driver.sprite_index;
    //set ids
    dirverId = driver.id
    dirverObjectId = driver.object_index
    //set input
    driverInput = driver.playerInput;
    //freeze action input
    actionInputFreeze = actionInputFreezeMax;
    //deactivate driver
    driver.active = false;
    //if civilian start driving
    if (driver.civilian) alarm[0] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw self
draw_self();
//draw health
if (script_execute(scr_idExist, driver) || script_execute(scr_idExist, passenger)) {
    draw_healthbar(x, y + 32, x + 32, y + 30, nHealth, c_black, c_red, c_green, 180, true, false);
    }

//draw driver
if (script_execute(scr_idExist, driver)) {
    if (image_index = 0) draw_sprite(driverImage, driver.image_index, x + 9, y + 4);
    if (image_index = 1) draw_sprite(driverImage, driver.image_index, x + 13, y + 4);
    if (image_index = 2) draw_sprite(driverImage, driver.image_index, x + 16, y + 10);
    if (image_index = 3) draw_sprite(driverImage, driver.image_index, x + 14, y + 13);
    if (image_index = 4) draw_sprite(driverImage, driver.image_index, x + 9, y + 15);
    if (image_index = 5) draw_sprite(driverImage, driver.image_index, x + 5, y + 13);
    if (image_index = 6) draw_sprite(driverImage, driver.image_index, x + 4, y + 10);
    if (image_index = 7) draw_sprite(driverImage, driver.image_index, x + 5, y + 4);
    }

//draw passenger
if (script_execute(scr_idExist, passenger)) {
    if (image_index = 0) draw_sprite(passengerImage, passenger.image_index, x + 9, y + 18);
    if (image_index = 1) draw_sprite(passengerImage, passenger.image_index, x + 3, y + 15);
    if (image_index = 2) draw_sprite(passengerImage, passenger.image_index, x + 0, y + 9);
    if (image_index = 3) draw_sprite(passengerImage, passenger.image_index, x + 3, y + 2);
    if (image_index = 4) draw_sprite(passengerImage, passenger.image_index, x + 9, y + 0);
    if (image_index = 5) draw_sprite(passengerImage, passenger.image_index, x + 16, y + 2);
    if (image_index = 6) draw_sprite(passengerImage, passenger.image_index, x + 18, y + 9);
    if (image_index = 7) draw_sprite(passengerImage, passenger.image_index, x + 16, y + 15);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
